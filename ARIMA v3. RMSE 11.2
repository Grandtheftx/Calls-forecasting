{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "scipy: 1.2.1\n",
      "numpy: 1.16.4\n",
      "matplotlib: 3.1.0\n",
      "pandas: 0.24.2\n",
      "sklearn: 0.21.2\n",
      "statsmodels: 0.10.0\n"
     ]
    }
   ],
   "source": [
    "import scipy\n",
    "print('scipy: %s' % scipy.__version__)\n",
    "# numpy\n",
    "import numpy\n",
    "print('numpy: %s' % numpy.__version__)\n",
    "# matplotlib\n",
    "import matplotlib\n",
    "print('matplotlib: %s' % matplotlib.__version__)\n",
    "# pandas\n",
    "import pandas\n",
    "print('pandas: %s' % pandas.__version__)\n",
    "# scikit-learn\n",
    "import sklearn\n",
    "print('sklearn: %s' % sklearn.__version__)\n",
    "# statsmodels\n",
    "import statsmodels\n",
    "print('statsmodels: %s' % statsmodels.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 456, Validation 72\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "series = pd.read_excel(r'C:\\Users\\Granin-ia\\Desktop\\Звонки\\november\\Calls7\\Calls7.xlsx', header=0, index_col=0)\n",
    "#series.head(2)\n",
    "split_point = len(series) - 72\n",
    "dataset, validation = series[0:split_point], series[split_point:]\n",
    "print('Dataset %d, Validation %d' % (len(dataset), len(validation)))\n",
    "dataset.to_excel(r'C:\\Users\\Granin-ia\\Desktop\\Звонки\\november\\Calls7\\dataset.xlsx', index=False)\n",
    "validation.to_excel(r'C:\\Users\\Granin-ia\\Desktop\\Звонки\\november\\Calls7\\validation.xlsx', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>calls</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-10-20 00:00:00</th>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-20 01:00:00</th>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     calls\n",
       "date                      \n",
       "2019-10-20 00:00:00     24\n",
       "2019-10-20 01:00:00      7"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# prepare data\n",
    "X = series.values\n",
    "X = X.astype('float32')\n",
    "train_size = int(len(X) * 0.50)\n",
    "train, test = X[0:train_size], X[train_size:]\n",
    "series.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            calls\n",
      "count  600.000000\n",
      "mean    25.973333\n",
      "std     23.831124\n",
      "min      0.000000\n",
      "25%      1.000000\n",
      "50%     25.000000\n",
      "75%     46.000000\n",
      "max     91.000000\n"
     ]
    }
   ],
   "source": [
    "print(series.describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>calls</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-11-11 00:00:00</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-11 01:00:00</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     calls\n",
       "date                      \n",
       "2019-11-11 00:00:00      1\n",
       "2019-11-11 01:00:00      1"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#import matplotlib as plt\n",
    "#from matplotlib import pyplot\n",
    "#from statsmodels.graphics.tsaplots import plot_acf\n",
    "#from statsmodels.graphics.tsaplots import plot_pacf\n",
    "#series = pd.read_excel(r'C:\\Users\\Granin-ia\\Desktop\\Звонки\\november\\Calls6.xlsx', header=0, index_col=0)\n",
    "#series.plot()\n",
    "#pyplot.show()\n",
    "#pyplot.figure()\n",
    "#pyplot.subplot(211)\n",
    "#plot_acf(series, ax=pyplot.gca())\n",
    "#pyplot.subplot(212)\n",
    "#plot_pacf(series, ax=pyplot.gca())\n",
    "#pyplot.show()\n",
    "validation.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Granin-ia\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\statsmodels\\base\\model.py:512: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
      "  \"Check mle_retvals\", ConvergenceWarning)\n",
      "C:\\Users\\Granin-ia\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\statsmodels\\base\\model.py:512: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
      "  \"Check mle_retvals\", ConvergenceWarning)\n",
      "C:\\Users\\Granin-ia\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\statsmodels\\base\\model.py:512: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
      "  \"Check mle_retvals\", ConvergenceWarning)\n"
     ]
    }
   ],
   "source": [
    "#from statsmodels.tsa.arima_model import ARIMA\n",
    "#from sklearn.metrics import mean_squared_error\n",
    "#from math import sqrt\n",
    "#history = [x for x in train]\n",
    "#predictions = list()\n",
    "#for i in range(len(test)):\n",
    "# predict\n",
    "    #model = ARIMA(history, order=(0,1,0))\n",
    "    #model_fit = model.fit(disp=0)\n",
    "    #yhat = model_fit.forecast()[0]\n",
    "    #predictions.append(yhat)\n",
    "    # observation\n",
    "    #obs = test[i]\n",
    "    #history.append(obs)\n",
    "    #print('>Predicted=%.3f, Expected=%3.f' % (yhat, obs))\n",
    "# report performance\n",
    "#mse = mean_squared_error(test, predictions)\n",
    "#rmse = sqrt(mse)\n",
    "#print('RMSE: %.3f' % rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ARIMA(0, 0, 1) RMSE=19.399\n",
      "ARIMA(0, 0, 3) RMSE=12.711\n",
      "ARIMA(0, 1, 1) RMSE=9.937\n",
      "ARIMA(0, 1, 2) RMSE=9.928\n",
      "ARIMA(0, 1, 3) RMSE=9.889\n",
      "ARIMA(0, 1, 4) RMSE=9.891\n",
      "ARIMA(0, 2, 1) RMSE=10.028\n",
      "ARIMA(0, 2, 2) RMSE=9.950\n",
      "ARIMA(1, 0, 0) RMSE=9.888\n",
      "ARIMA(1, 0, 1) RMSE=9.783\n",
      "ARIMA(1, 0, 2) RMSE=9.746\n",
      "ARIMA(1, 0, 3) RMSE=9.655\n",
      "ARIMA(1, 0, 4) RMSE=9.707\n",
      "ARIMA(1, 1, 0) RMSE=9.930\n",
      "ARIMA(1, 2, 0) RMSE=11.527\n",
      "ARIMA(1, 2, 1) RMSE=9.943\n",
      "ARIMA(1, 2, 2) RMSE=9.915\n",
      "ARIMA(1, 2, 3) RMSE=9.928\n",
      "ARIMA(1, 2, 4) RMSE=9.900\n",
      "ARIMA(2, 0, 0) RMSE=9.762\n",
      "ARIMA(2, 0, 1) RMSE=9.678\n",
      "ARIMA(2, 1, 0) RMSE=9.905\n",
      "ARIMA(2, 2, 0) RMSE=11.055\n",
      "ARIMA(2, 2, 1) RMSE=9.918\n",
      "ARIMA(2, 2, 2) RMSE=9.921\n",
      "ARIMA(2, 2, 3) RMSE=10.016\n",
      "ARIMA(3, 0, 0) RMSE=9.693\n",
      "ARIMA(3, 0, 1) RMSE=9.731\n",
      "ARIMA(3, 1, 0) RMSE=9.916\n",
      "ARIMA(3, 2, 0) RMSE=11.024\n",
      "ARIMA(3, 2, 1) RMSE=9.929\n",
      "ARIMA(4, 0, 0) RMSE=9.670\n",
      "ARIMA(4, 1, 0) RMSE=9.858\n",
      "ARIMA(4, 2, 0) RMSE=10.900\n",
      "ARIMA(4, 2, 1) RMSE=9.870\n",
      "Best ARIMA(1, 0, 3) RMSE=9.655\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'best_cfg' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-7-1cdd3e85cfec>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     47\u001b[0m \u001b[0mwarnings\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfilterwarnings\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"ignore\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     48\u001b[0m \u001b[0mevaluate_models\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mseries\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mp_values\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0md_values\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mq_values\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 49\u001b[1;33m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'Best ARIMA%s RMSE=%.3f'\u001b[0m \u001b[1;33m%\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mbest_cfg\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mbest_score\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'best_cfg' is not defined"
     ]
    }
   ],
   "source": [
    "import warnings\n",
    "from pandas import read_csv\n",
    "from statsmodels.tsa.arima_model import ARIMA\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from math import sqrt\n",
    "def evaluate_arima_model(X, arima_order):\n",
    "    # prepare training dataset\n",
    "    X = X.astype('float32')\n",
    "    train_size = int(len(X) * 0.50)\n",
    "    train, test = X[0:train_size], X[train_size:]\n",
    "    history = [x for x in train]\n",
    "    # make predictions\n",
    "    predictions = list()\n",
    "    for t in range(len(test)):\n",
    "        model = ARIMA(history, order=arima_order)\n",
    "        # model_fit = model.fit(disp=0)\n",
    "        model_fit = model.fit(trend='nc', disp=0)\n",
    "        yhat = model_fit.forecast()[0]\n",
    "        predictions.append(yhat)\n",
    "        history.append(test[t])\n",
    "    # calculate out of sample error\n",
    "    mse = mean_squared_error(test, predictions)\n",
    "    rmse = sqrt(mse)\n",
    "    return rmse \n",
    "# evaluate combinations of p, d and q values for an ARIMA model\n",
    "def evaluate_models(dataset, p_values, d_values, q_values):\n",
    "    dataset = dataset.astype('float32')\n",
    "    best_score, best_cfg = float(\"inf\"), None\n",
    "    for p in p_values:\n",
    "        for d in d_values:\n",
    "            for q in q_values:\n",
    "                order = (p,d,q)\n",
    "                try:\n",
    "                    mse = evaluate_arima_model(dataset, order)\n",
    "                    if mse < best_score:\n",
    "                        best_score, best_cfg = mse, order\n",
    "                    print('ARIMA%s RMSE=%.3f' % (order,mse))\n",
    "                except:\n",
    "                    continue\n",
    "    print('Best ARIMA%s RMSE=%.3f' % (best_cfg, best_score))\n",
    "# load dataset\n",
    "series = pd.read_excel(r'C:\\Users\\Granin-ia\\Desktop\\Звонки\\november\\Calls7\\Calls7.xlsx', header=0, index_col=0)\n",
    "# evaluate parameters\n",
    "p_values = range(0, 5)\n",
    "d_values = range(0, 3)\n",
    "q_values = range(0, 5)\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "evaluate_models(series.values, p_values, d_values, q_values)\n",
    "print('Best ARIMA%s RMSE=%.3f' % (best_cfg, best_score))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                0\n",
      "count  300.000000\n",
      "mean     1.365291\n",
      "std      9.574269\n",
      "min    -47.410141\n",
      "25%     -1.222587\n",
      "50%      0.067612\n",
      "75%      4.935396\n",
      "max     36.540291\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from pandas import read_csv\n",
    "from pandas import DataFrame\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from statsmodels.tsa.arima_model import ARIMA\n",
    "from math import sqrt\n",
    "from matplotlib import pyplot\n",
    "# load data\n",
    "series = pd.read_excel(r'C:\\Users\\Granin-ia\\Desktop\\Звонки\\november\\Calls7\\Calls7.xlsx', header=0, index_col=0)\n",
    "# prepare data\n",
    "X = series.values\n",
    "X = X.astype('float32')\n",
    "train_size = int(len(X) * 0.50)\n",
    "train, test = X[0:train_size], X[train_size:]\n",
    "# walk-forward validation\n",
    "history = [x for x in train]\n",
    "predictions = list()\n",
    "for i in range(len(test)):\n",
    "    # predict\n",
    "    model = ARIMA(history, order=(1, 0, 3))\n",
    "    model_fit = model.fit(trend='nc', disp=0)\n",
    "    yhat = model_fit.forecast()[0]\n",
    "    predictions.append(yhat)\n",
    "    # observation\n",
    "    obs = test[i]\n",
    "    history.append(obs)\n",
    "# errors\n",
    "residuals = [test[i]-predictions[i] for i in range(len(test))]\n",
    "residuals = DataFrame(residuals)\n",
    "print(residuals.describe())\n",
    "pyplot.figure()\n",
    "pyplot.subplot(211)\n",
    "residuals.hist(ax=pyplot.gca())\n",
    "pyplot.subplot(212)\n",
    "residuals.plot(kind='kde', ax=pyplot.gca())\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE: 9.563\n",
      "                0\n",
      "count  300.000000\n",
      "mean     0.283667\n",
      "std      9.574269\n",
      "min    -48.491768\n",
      "25%     -2.304212\n",
      "50%     -1.014012\n",
      "75%      3.853770\n",
      "max     35.458668\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from pandas import read_csv\n",
    "from pandas import DataFrame\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from statsmodels.tsa.arima_model import ARIMA\n",
    "from math import sqrt\n",
    "from matplotlib import pyplot\n",
    "# load data\n",
    "series = pd.read_excel(r'C:\\Users\\Granin-ia\\Desktop\\Звонки\\november\\Calls7\\Calls7.xlsx', header=0, index_col=0)\n",
    "# prepare data\n",
    "X = series.values\n",
    "X = X.astype('float32')\n",
    "train_size = int(len(X) * 0.50)\n",
    "train, test = X[0:train_size], X[train_size:]\n",
    "# walk-forward validation\n",
    "history = [x for x in train]\n",
    "predictions = list()\n",
    "bias = 1.081624\n",
    "for i in range(len(test)):\n",
    "    # predict\n",
    "    model = ARIMA(history, order=(1,0,3))\n",
    "    model_fit = model.fit(trend='nc', disp=0)\n",
    "    yhat = bias + float(model_fit.forecast()[0])\n",
    "    predictions.append(yhat)\n",
    "    # observation\n",
    "    obs = test[i]\n",
    "    history.append(obs)\n",
    "# report performance\n",
    "mse = mean_squared_error(test, predictions)\n",
    "rmse = sqrt(mse)\n",
    "print('RMSE: %.3f' % rmse)\n",
    "# summarise residual errors\n",
    "residuals = [test[i]-predictions[i] for i in range(len(test))]\n",
    "residuals = DataFrame(residuals)\n",
    "print(residuals.describe())\n",
    "# plot residual errors\n",
    "pyplot.figure()\n",
    "pyplot.subplot(211)\n",
    "residuals.hist(ax=pyplot.gca())\n",
    "pyplot.subplot(212)\n",
    "residuals.plot(kind='kde', ax=pyplot.gca())\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "r\n"
     ]
    }
   ],
   "source": [
    "from pandas import read_csv\n",
    "from statsmodels.tsa.arima_model import ARIMA\n",
    "from scipy.stats import boxcox\n",
    "import numpy\n",
    " \n",
    "# monkey patch around bug in ARIMA class\n",
    "def __getnewargs__(self):\n",
    "    return ((self.endog),(self.k_lags, self.k_diff, self.k_ma))\n",
    " \n",
    "ARIMA.__getnewargs__ = __getnewargs__\n",
    " \n",
    "# load data\n",
    "series = pd.read_excel(r'C:\\Users\\Granin-ia\\Desktop\\Звонки\\november\\Calls7\\Calls7.xlsx', header=0, index_col=0)\n",
    "# prepare data\n",
    "X = series.values\n",
    "X = X.astype('float32')\n",
    "# fit model\n",
    "model = ARIMA(X, order=(1, 0, 3))\n",
    "model_fit = model.fit(trend='nc', disp=0)\n",
    "# bias constant, could be calculated from in-sample mean residual\n",
    "bias = 1.081624\n",
    "# save model\n",
    "model_fit.save(r'C:\\Users\\Granin-ia\\Desktop\\Звонки\\november\\Calls7\\model7.pkl')\n",
    "numpy.save(r'C:\\Users\\Granin-ia\\Desktop\\Звонки\\november\\Calls7\\model_bias7.npy', [bias])\n",
    "print('r')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted: 2.014\n"
     ]
    }
   ],
   "source": [
    "from statsmodels.tsa.arima_model import ARIMAResults\n",
    "import numpy\n",
    "model_fit = ARIMAResults.load(r'C:\\Users\\Granin-ia\\Desktop\\Звонки\\november\\Calls7\\model7.pkl')\n",
    "bias = numpy.load(r'C:\\Users\\Granin-ia\\Desktop\\Звонки\\november\\Calls7\\model_bias7.npy')\n",
    "yhat = bias + float(model_fit.forecast()[0])\n",
    "print('Predicted: %.3f' % yhat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ">Predicted=2.014, Expected=  9\n",
      ">Predicted=1.285, Expected=  0\n",
      ">Predicted=-3.204, Expected=  0\n",
      ">Predicted=-0.475, Expected=  0\n",
      ">Predicted=1.082, Expected=  0\n",
      ">Predicted=1.082, Expected=  0\n",
      ">Predicted=1.082, Expected=  0\n",
      ">Predicted=1.082, Expected=  0\n",
      ">Predicted=1.082, Expected=  2\n",
      ">Predicted=3.317, Expected= 11\n",
      ">Predicted=13.352, Expected= 32\n",
      ">Predicted=36.426, Expected= 36\n",
      ">Predicted=39.017, Expected= 27\n",
      ">Predicted=25.211, Expected= 31\n",
      ">Predicted=29.197, Expected= 48\n",
      ">Predicted=49.752, Expected= 42\n",
      ">Predicted=41.948, Expected= 40\n",
      ">Predicted=37.016, Expected= 44\n",
      ">Predicted=42.563, Expected= 44\n",
      ">Predicted=42.807, Expected= 78\n",
      ">Predicted=80.399, Expected= 59\n",
      ">Predicted=58.557, Expected= 62\n",
      ">Predicted=56.260, Expected= 53\n",
      ">Predicted=49.520, Expected= 18\n",
      ">Predicted=10.012, Expected= 16\n",
      ">Predicted=9.659, Expected= 12\n",
      ">Predicted=11.222, Expected=  2\n",
      ">Predicted=0.503, Expected=  2\n",
      ">Predicted=1.255, Expected=  2\n",
      ">Predicted=2.945, Expected=  0\n",
      ">Predicted=0.729, Expected=  1\n",
      ">Predicted=1.852, Expected=  1\n",
      ">Predicted=2.182, Expected=  3\n",
      ">Predicted=4.229, Expected= 22\n",
      ">Predicted=25.274, Expected= 23\n",
      ">Predicted=25.891, Expected= 39\n",
      ">Predicted=40.413, Expected= 57\n",
      ">Predicted=60.232, Expected= 43\n",
      ">Predicted=41.723, Expected= 43\n",
      ">Predicted=38.781, Expected= 56\n",
      ">Predicted=55.636, Expected= 45\n",
      ">Predicted=43.288, Expected= 21\n",
      ">Predicted=14.566, Expected= 34\n",
      ">Predicted=31.208, Expected= 41\n",
      ">Predicted=42.563, Expected= 50\n",
      ">Predicted=50.418, Expected= 52\n",
      ">Predicted=51.384, Expected= 40\n",
      ">Predicted=36.611, Expected= 36\n",
      ">Predicted=32.117, Expected= 22\n",
      ">Predicted=18.513, Expected=  5\n",
      ">Predicted=0.513, Expected=  2\n",
      ">Predicted=-0.250, Expected=  1\n",
      ">Predicted=1.368, Expected=  3\n",
      ">Predicted=4.077, Expected=  3\n",
      ">Predicted=4.190, Expected=  1\n",
      ">Predicted=1.658, Expected=  4\n",
      ">Predicted=5.031, Expected= 11\n",
      ">Predicted=13.046, Expected= 20\n",
      ">Predicted=22.423, Expected= 40\n",
      ">Predicted=43.408, Expected= 66\n",
      ">Predicted=70.710, Expected= 66\n",
      ">Predicted=66.774, Expected= 53\n",
      ">Predicted=48.064, Expected= 42\n",
      ">Predicted=36.156, Expected= 35\n",
      ">Predicted=30.692, Expected= 43\n",
      ">Predicted=41.624, Expected= 46\n",
      ">Predicted=45.767, Expected= 41\n",
      ">Predicted=38.843, Expected= 43\n",
      ">Predicted=40.831, Expected= 47\n",
      ">Predicted=46.008, Expected= 59\n",
      ">Predicted=59.060, Expected= 34\n",
      ">Predicted=29.988, Expected= 28\n",
      "RMSE: 11.253\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from pandas import read_csv\n",
    "from matplotlib import pyplot\n",
    "from statsmodels.tsa.arima_model import ARIMA\n",
    "from statsmodels.tsa.arima_model import ARIMAResults\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from math import sqrt\n",
    "import numpy\n",
    "# load and prepare datasets\n",
    "dataset = pd.read_excel(r'C:\\Users\\Granin-ia\\Desktop\\Звонки\\november\\Calls7\\dataset.xlsx')\n",
    "X = dataset.values.astype('float32')\n",
    "history = [x for x in X]\n",
    "validation = pd.read_excel(r'C:\\Users\\Granin-ia\\Desktop\\Звонки\\november\\Calls7\\validation.xlsx')\n",
    "y = validation.values.astype('float32')\n",
    "# load model\n",
    "model_fit = ARIMAResults.load(r'C:\\Users\\Granin-ia\\Desktop\\Звонки\\november\\Calls7\\model7.pkl')\n",
    "bias = numpy.load(r'C:\\Users\\Granin-ia\\Desktop\\Звонки\\november\\Calls7\\model_bias7.npy')\n",
    "# make first prediction\n",
    "predictions = list()\n",
    "yhat = bias + float(model_fit.forecast()[0])\n",
    "predictions.append(yhat)\n",
    "history.append(y[0])\n",
    "print('>Predicted=%.3f, Expected=%3.f' % (yhat, y[0]))\n",
    "# rolling forecasts\n",
    "for i in range(1, len(y)):\n",
    "    # predict\n",
    "    model = ARIMA(history, order=(3,0,0))\n",
    "    model_fit = model.fit(trend='nc', disp=0)\n",
    "    yhat = bias + float(model_fit.forecast()[0])\n",
    "    predictions.append(yhat)\n",
    "    # observation\n",
    "    obs = y[i]\n",
    "    history.append(obs)\n",
    "    print('>Predicted=%.3f, Expected=%3.f' % (yhat, obs))\n",
    "# report performance\n",
    "mse = mean_squared_error(y, predictions)\n",
    "rmse = sqrt(mse)\n",
    "print('RMSE: %.3f' % rmse)\n",
    "pyplot.plot(y)\n",
    "pyplot.plot(predictions, color='red')\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
